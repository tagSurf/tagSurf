<%= stylesheet_link_tag "sessions", :media => "all" %>

<%= form_for(@user, :url => "/phone/verify/#{@user.id}", :method => :post, :remote => false, :html => {:method => 'post', :role => 'form', :id => 'confirm_form'}) do |f| %>
  <center>
   <div class="tslogo"></div>
   <div class="ac-text-container">
    <p>Enter your verification code</p>
   </div>
  <div class="input-border-container hidden" style="margin-bottom:10px;">
    <%= telephone_field(:code, nil, id: 'code', class: 'ts-input') %>
  </div>

  <input type="tel" class="ts-input code" maxlength="1"/>
  <input type="tel" class="ts-input code" maxlength="1"/>
  <input type="tel" class="ts-input code" maxlength="1"/>
  <input type="tel" class="ts-input code" maxlength="1"/>

  <div id='submit-btn' class="button input-width disabled-button" style="margin-top: 10px;", onclick="form_submit();">Submit</div>
  <a href = "/phone"><div id='submit-btn' class="button input-width" style="margin-top: 10px;", onclick="form_submit();"><- Edit Number</div></a>

  </center>
<% end %>

<%= javascript_include_tag "sessions" %>

<script type="text/javascript">
  var inputs = document.getElementsByClassName('ts-input');
      container = document.getElementsByClassName('input-border-container')[0];

  if (isUIWebView() && isIos()) {
    container.classList.remove('hidden');

    for (i=1; i<inputs.length; i++) {
      inputs[i].classList.add('hidden');
    };
  };

  var form_submit = function() {
    var f = document.getElementById('confirm_form'),
    code_field = document.getElementById('code'),
    code = "";

    if (isUIWebView() && isIos()){
      code_field.value = code_field.value.trim()
      if (code_field.value.length == 0) {
        return;
      } else if (code_field.value.length < 4) {
        alert("Please enter a complete code");
        return;
      } else {
        code_field.value = code_field.value.toString();
        f.submit();
        return;
      } 
    };

    for (i=0; i<inputs.length; i++) {
      code += inputs[i].value
    };
    if (code.length == 0) {
      return;
    } else if (code.length < 4) {
      alert("Please enter a complete code");
      return;
    }
    code_field.value = code;
    f.submit(); 
  };

  stroke.listen("up", "13", function() {
    form_submit();
  });

  stroke.listen("up", null, function(kobj){
    if (isUIWebView() && isIos()) {
      var code = document.getElementById('code').value,
          submitBtn = document.getElementById('submit-btn');
      if (code.length < 4 && submitBtn.className.indexOf('disabled-button') == -1)
        submitBtn.classList.add("disabled-button");
      else if (code.length >= 4)
        submitBtn.classList.remove("disabled-button");
      return;
    }
    var submitBtn = document.getElementById('submit-btn');
    if ((document.activeElement == inputs[inputs.length-1]) && !(inputs[inputs.length-1].value == ""))
      submitBtn.classList.remove("disabled-button");
    else if (submitBtn.className.indexOf('disabled-button') == -1)
      submitBtn.classList.add("disabled-button");

    if (kobj.code == 8) {
      for (i=0; i<inputs.length; ++i) {
        if (document.activeElement == inputs[i]) {
          inputs[i-1].focus();
          break;
        }
      };
    }
    else {
      for (i=0; i<inputs.length-1; ++i) {
        if (document.activeElement == inputs[i]) {
          inputs[i+1].focus();
          break;
        }
      };
    }
  });


  inputs[0].onfocus = function () { toggleClass.apply(inputs[0].parentNode, ["focused"]); };
  inputs[1].onfocus = function () { toggleClass.apply(inputs[1], ["focused"]); };
  inputs[2].onfocus = function () { toggleClass.apply(inputs[2], ["focused"]); };
  inputs[3].onfocus = function () { toggleClass.apply(inputs[3], ["focused"]); };
  inputs[4].onfocus = function () { toggleClass.apply(inputs[4], ["focused"]); };
  inputs[0].onblur = function () { toggleClass.apply(inputs[0].parentNode, ["focused"]); };
  inputs[1].onblur = function () { toggleClass.apply(inputs[1], ["focused"]); };
  inputs[2].onblur = function () { toggleClass.apply(inputs[2], ["focused"]); };
  inputs[3].onblur = function () { toggleClass.apply(inputs[3], ["focused"]); };
  inputs[4].onblur = function () { toggleClass.apply(inputs[4], ["focused"]); };

</script>