<%= stylesheet_link_tag "sessions", :media => "all" %>

<%= form_for(@user, :url => user_path(@user), :remote => false, :html => {:method => 'put', :role => 'form', :id => 'username_form'}) do |f| %>
  <center>
   <div class="tslogo"></div>
   <div class="ac-text-container">
    <p>Pick your surfer name!</p>
   </div>
  <div class="input-border-container" style="margin-bottom:10px;">
    <%= f.text_field :username, placeholder: "username", autocomplete: "off", spellcheck: "false", autocapitalize: "off", autocorrect: "off", class: 'ts-input' %>
    <div id="check-indicator" class="available hidden">&#10003</div>  
  </div>

  <div id='submit-btn' class="button input-width disabled-button", onclick="form_submit();">Submit</div>

  </center>
<% end %>

<%= javascript_include_tag "sessions" %>

<script type="text/javascript">
  var inputs = document.getElementsByClassName('ts-input');

  var check_availability = function() {
    var username = document.getElementById('user_username').value;

    xhr('/api/users/check-name/' + username, 'Get', function(response) {
    }, null);
    console.log(available);
  };

  var form_submit = function() {
    var username = document.getElementById('user_username').value,
    f = document.getElementById('username_form');
    if(username == "")
      alert('Please pick a surfer name');
    xhr('/api/users/check-name/' + username, 'Get', function(response) {
      if (response.users[0].available)
        f.submit()
      else
        alert('That surfer name is already taken :(');
    }, null);
  }

  stroke.listen("up", "13", function() {
    form_submit();
  });

  stroke.listen("up", null, function() {
    var username = document.getElementById('user_username').value,
        indicator = document.getElementById('check-indicator'),
        button = document.getElementById('submit-btn');

    if (username == "") {
      if (!indicator.classList.contains('hidden'))
        indicator.classList.add('hidden');
      if (!button.classList.contains('disabled-button'))
        button.classList.add('disabled-button');
    } 
    else {
      xhr('/api/users/check-name/' + username, 'Get', function(response) {
        if (response.users[0].available) {
          if (indicator.classList.contains('hidden'))
            indicator.classList.remove('hidden');
          if (button.classList.contains('disabled-button'))
            button.classList.remove('disabled-button');
          if (indicator.classList.contains('unavailable')){
            indicator.classList.remove('unavailable');
            indicator.classList.add('available');
          }
          indicator.innerHTML = "&#10003";
        }
        else {
          if (indicator.classList.contains('hidden'))
            indicator.classList.remove('hidden');
          if (!button.classList.contains('disabled-button'))
            button.classList.add('disabled-button');
          if (indicator.classList.contains('available')){
            indicator.classList.remove('available');
            indicator.classList.add('unavailable');
          }
          indicator.innerHTML = "X";
        }
      }, null);
    }
  });

  inputs[0].onfocus = function () { toggleClass.apply(inputs[0].parentNode, ["focused"]); };
  inputs[0].onblur = function () { toggleClass.apply(inputs[0].parentNode, ["focused"]); };

</script>