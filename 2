require "spec_helper"

describe Card do

  let(:user) { User.create!(email: 'admin@example.com', password: '12345678', password_confirmation: '12345678', beta_user: true) }

  
  let(:card) { 
    Card.create!(
      image_link_original: "http://i.imgur.com/vW5QZE1.png",  
      remote_id: "vW5QZE1", 
      remote_provider: 'imgur', 
      content_type: "image/png",
      remote_score: 1,
      ts_score: 10
    )
  }

  let(:card_2) {
    Card.create!(
      image_link_original: "http://i.imgur.com/vW5QZE1.png",  
      remote_id: "vW5QZE1", 
      remote_provider: 'imgur', 
      content_type: "image/png",
      remote_score: 5000,
      ts_score: 0
    )
  }

  let(:card_3) {
    Card.create!(
      image_link_original: "http://i.imgur.com/vW5QZE1.png",  
      remote_id: "vW5QZE1", 
      remote_provider: 'imgur', 
      content_type: "image/png",
      remote_score: 5000,
      ts_score: 0
    )
  }

  let(:vote_1) { Vote.create!(voter_id: user.id, voter_type: "User", votable_type: "Card", votable_id: card.id, vote_flag: true) }
  let(:vote_2) { Vote.create!(voter_id: user.id, voter_type: "User", votable_type: "Card", votable_id: lower_card.id, vote_flag: true) }

  context :next do
    it "should order by ts_score then remote_score" do
      Card.next
      
    end
  end

  context :resize_image_links do 
    it "creates a thumbnail image link" do
      expect(card.image_link_thumbnail).to eq("http://i.imgur.com/vW5QZE1t.png")
    end

    it "creates a tiny image link" do
      expect(card.image_link_tiny).to eq("http://i.imgur.com/vW5QZE1s.png")
    end

    it "creates a medium image link" do
      expect(card.image_link_medium).to eq("http://i.imgur.com/vW5QZE1m.png")
    end

    it "creates a large image link" do
      expect(card.image_link_large).to eq("http://i.imgur.com/vW5QZE1l.png")
    end

  end



end
